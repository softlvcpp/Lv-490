#include "LoggerDLL.h"

/* NoLogs = 0, Prod = 1, Debug = 2, Trace = 3 */

filelog::FileLogger staticLogger{ "../LogFiles/serverlog_SDSD.log", filelog::LogLevel::Trace };

filelog::StaticFileLogMessage logProd{ };
filelog::StaticFileLogMessage logDebug{ };
filelog::StaticFileLogMessage logTrace{ };

void initMessagers()
{
	logProd = filelog::StaticFileLogMessage{ staticLogger, filelog::LogLevel::Prod };
	logDebug = filelog::StaticFileLogMessage{ staticLogger, filelog::LogLevel::Debug };
	logTrace = filelog::StaticFileLogMessage{ staticLogger, filelog::LogLevel::Trace };
}

void joinStaticLoggers()
{
	staticLogger.join();
}

int main()
{
	// First way   -----------------------------------------
	{
		filelog::FileLogger logger{ "../LogFiles/serverlog_firstex_.txt", filelog::LogLevel::Debug, 16ull * 1024 * 1024 * 1024 };

		if (logger.isInterrupted())
		{
			//std::cout << "First logger example has failed due to failuter to create file\n";
		}
		else
			for (size_t i = 0; i < 1000; ++i)
			{	// Macros are neccessary for us to be able to capture function signature
				SLOG_PROD(logger) << "logging production message";
				SLOG_DEBUG(logger) << "logging debug message";
				SLOG_TRACE(logger) << "filtering out and not logging trace message";
			}
		// Not calling join might lead to some messages not being written
		// because logger will just clear it's queue and join it's thread when destructor is called
	}

	// Second way	-----------------------------------------
	{
		initMessagers();
		if (staticLogger.isInterrupted())
		{
			//std::cout << "Second logger example has failed due to failuter to create file\n";
		}
		for (size_t i = 0; i < 1000; ++i)
		{	// Sending when destroying message
			LOGMSG(logProd) << "logging production message";
			LOGMSG(logDebug) << "logging debug message";
			LOGMSG(logTrace) << "logging trace message";
		}
		// Calling join leads to logger ignoring all incoming messages and writing all remaining into the file
		joinStaticLoggers();	
	}	

	// Third way    -----------------------------------------
	{
		filelog::FileLogger logger{ "../LogFiles/serverlog_thirdex.txt", filelog::LogLevel::Trace, 16ull * 1024 * 1024 * 1024 };
		if (logger.isInterrupted())
		{
			//std::cout << "Second logger example has failed due to failuter to create file\n";
		}
		else {
			auto msg{ SLOG_PROD(logger) };
			/* ... */
			msg << "info";
			/* ... */
			msg << "some more";
			/* ... */
			msg << "final words" << SLOG_ENDL; // Send manually or just let it send on destructor call
		}	
	}
}
